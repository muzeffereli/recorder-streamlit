{"version":3,"sources":["StreamlitAudioRecorder.tsx","index.tsx"],"names":["StAudioRec","state","isFocused","recordState","audioDataURL","reset","save","render","theme","props","style","borderStyling","primaryColor","border","outline","id","onClick","onClick_start","onClick_stop","onClick_reset","onClick_continue","onClick_save","onStop","onStop_audio","type","backgroundColor","foregroundColor","canvasWidth","canvasHeight","controls","src","setState","RecordState","START","STOP","Streamlit","setComponentValue","datetime","Date","toLocaleString","filename","replace","a","document","createElement","display","href","download","body","appendChild","click","data","url","fetch","then","ctx","blob","Response","arrayBuffer","buffer","console","log","arr","Uint8Array","PAUSE","StreamlitComponentBase","withStreamlitConnection","setComponentReady","setFrameHeight","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d426ef23.chunk.js","sourcesContent":["import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\n\r\nimport AudioReactRecorder, { RecordState } from \"audio-react-recorder\"\r\nimport \"audio-react-recorder/dist/index.css\"\r\n\r\ninterface State {\r\n  isFocused: boolean\r\n  recordState: null\r\n  audioDataURL: string\r\n  reset: boolean\r\n  save: boolean\r\n}\r\n\r\nclass StAudioRec extends StreamlitComponentBase<State> {\r\n  public state = {\r\n    isFocused: false,\r\n    recordState: null,\r\n    audioDataURL: \"\",\r\n    reset: false,\r\n    save: false,\r\n  }\r\n\r\n  public render = (): ReactNode => {\r\n    // Arguments that are passed to the plugin in Python are accessible\r\n\r\n    // Streamlit sends us a theme object via props that we can use to ensure\r\n    // that our component has visuals that match the active theme in a\r\n    // streamlit app.\r\n    const { theme } = this.props\r\n    const style: React.CSSProperties = {}\r\n\r\n    const { recordState } = this.state\r\n\r\n    // compatibility with older vers of Streamlit that don't send theme object.\r\n    if (theme) {\r\n      // Use the theme object to style our button border. Alternatively, the\r\n      // theme style is defined in CSS vars.\r\n      const borderStyling = `1px solid ${\r\n        this.state.isFocused ? theme.primaryColor : \"gray\"\r\n      }`\r\n      style.border = borderStyling\r\n      style.outline = borderStyling\r\n    }\r\n\r\n    return (\r\n      <span>\r\n        <div>\r\n          <button id=\"record\" onClick={this.onClick_start}>\r\n            Start Recording\r\n          </button>\r\n          <button id=\"stop\" onClick={this.onClick_stop}>\r\n            Stop\r\n          </button>\r\n          <button id=\"reset\" onClick={this.onClick_reset}>\r\n            Reset\r\n          </button>\r\n\r\n          <button id=\"continue\" onClick={this.onClick_continue}>\r\n            Download\r\n          </button>\r\n\r\n          <button id=\"save\" onClick={this.onClick_save}>\r\n            Save\r\n          </button>\r\n\r\n          <AudioReactRecorder\r\n            state={recordState}\r\n            onStop={this.onStop_audio}\r\n            type=\"audio/wav\"\r\n            backgroundColor=\"rgb(255, 255, 255)\"\r\n            foregroundColor=\"rgb(255,76,75)\"\r\n            canvasWidth={450}\r\n            canvasHeight={100}\r\n          />\r\n\r\n          <audio id=\"audio\" controls src={this.state.audioDataURL} />\r\n        </div>\r\n      </span>\r\n    )\r\n  }\r\n\r\n  private onClick_start = () => {\r\n    this.setState({\r\n      save: false,\r\n      reset: false,\r\n      audioDataURL: \"\",\r\n      recordState: RecordState.START,\r\n    })\r\n  }\r\n\r\n  private onClick_stop = () => {\r\n    this.setState({\r\n      save: false,\r\n      reset: false,\r\n      recordState: RecordState.STOP,\r\n    })\r\n  }\r\n\r\n  private onClick_reset = () => {\r\n    this.setState({\r\n      reset: true,\r\n      audioDataURL: \"\",\r\n      save: false,\r\n      recordState: RecordState.STOP,\r\n    })\r\n    Streamlit.setComponentValue(\"\")\r\n  }\r\n\r\n  private onClick_continue = () => {\r\n    if (this.state.audioDataURL !== \"\") {\r\n      // get datetime string for filename\r\n      let datetime = new Date().toLocaleString()\r\n      datetime = datetime.replace(\" \", \"\")\r\n      datetime = datetime.replace(/_/g, \"\")\r\n      datetime = datetime.replace(\",\", \"\")\r\n      var filename = \"streamlit_audio_\" + datetime + \".wav\"\r\n\r\n      // auromatically trigger download\r\n      const a = document.createElement(\"a\")\r\n      a.style.display = \"none\"\r\n      a.href = this.state.audioDataURL\r\n      a.download = filename\r\n      document.body.appendChild(a)\r\n      a.click()\r\n    }\r\n  }\r\n\r\n  private onClick_save = () => {\r\n    this.setState({\r\n      reset: false,\r\n      save: true,\r\n      recordState: RecordState.STOP,\r\n    })\r\n  }\r\n\r\n  private onStop_audio = (data) => {\r\n    if (this.state.reset === true) {\r\n      this.setState({\r\n        audioDataURL: \"\",\r\n        save: false,\r\n      })\r\n      Streamlit.setComponentValue(\"\")\r\n    } else if (this.state.save === true) {\r\n      this.setState({\r\n        audioDataURL: data.url,\r\n      })\r\n\r\n      fetch(data.url)\r\n        .then(function (ctx) {\r\n          return ctx.blob()\r\n        })\r\n        .then(function (blob) {\r\n          // converting blob to arrayBuffer, this process step needs to be be improved\r\n          // this operation's time complexity scales exponentially with audio length\r\n          return new Response(blob).arrayBuffer()\r\n        })\r\n        .then(function (buffer) {\r\n          console.log(\"state true\")\r\n          Streamlit.setComponentValue({\r\n            arr: new Uint8Array(buffer),\r\n            save: true,\r\n          })\r\n        })\r\n    } else {\r\n      this.setState({\r\n        audioDataURL: data.url,\r\n      })\r\n\r\n      fetch(data.url)\r\n        .then(function (ctx) {\r\n          return ctx.blob()\r\n        })\r\n        .then(function (blob) {\r\n          // converting blob to arrayBuffer, this process step needs to be be improved\r\n          // this operation's time complexity scales exponentially with audio length\r\n          return new Response(blob).arrayBuffer()\r\n        })\r\n        .then(function (buffer) {\r\n          Streamlit.setComponentValue({\r\n            arr: new Uint8Array(buffer),\r\n            save: false,\r\n          })\r\n        })\r\n      this.state.recordState = RecordState.PAUSE\r\n    }\r\n  }\r\n}\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(StAudioRec)\r\n\r\n// Tell Streamlit we're ready to start receiving data. We won't get our\r\n// first RENDER_EVENT until we call this function.\r\nStreamlit.setComponentReady()\r\n\r\n// Finally, tell Streamlit to update our initial height. We omit the\r\n// `height` parameter here to have it default to our scrollHeight.\r\nStreamlit.setFrameHeight()\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport StAudioRec from \"./StreamlitAudioRecorder\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StAudioRec />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}